[[model]]
author: Chon Lok Lei
name: compensated_voltage_clamp_mc3
desc: """
Myokit version of a simple model cell type-III (mc3) model under a simplified
voltage clamp model with standard compensation. Only the major effects are
modelled.

Units:
    time in [ms]
    voltage in [mV]
    current in [pA]
    capacitance in [pF]
    resistance in [GOhm]
"""

# Initial values
membrane.V = -80.0 [mV]
mc.Ik = 0 [pA]
mc.Icc = 0 [pA]  # Current leaked through Rs, Cprs connected to the CC.


[mc]
use membrane.dVdt, membrane.V
dot(Ik) = gk * (dVdt - Ik / ck)
    in [pA]
#ck = 100.0 * gk in [pF]  # for decay rate ~100 ms
ck = 1000. in [pF]  # for decay rate ~100 ms
gk = 10.0 [pA/mV]  # in O(100) pA range
Im = gm * V
gm = 2.0 [pA/mV]  # in O(100) pA range
dot(Icc) = voltageclamp.rseries * (dVdt - Icc / voltageclamp.cprs)
    in [pA]
I = Ik + Im + Icc
    desc: model cell current
    in [pA]


[engine]
time = 0 bind time
    in [ms]
pace = 0 bind pace


[membrane]
use voltageclamp.Vp, voltageclamp.rseries, voltageclamp.voffset_eff
cm = voltageclamp.cm_est in [pF]  # in order of pF; assumption
dVdt = (Vp - V + voffset_eff) / tau - mc.I / cm
    tau = cm * rseries in [ms]
    desc: membane potential
    in [mV]
dot(V) = dVdt in [mV]

[voltageclamp]
use membrane.V
rseries = 5.0 * 1e-3 [GR]  # in order of MegaOhms; TODO: fit
voffset_eff = 5 [mV]  # TODO: fit
rseries_est = 0.9 * 5.0e-3 [GR]  # TODO: later this one use measured value
cm_est = 10.0 [pF]  # TODO: similar to rseries_est, set value
Vc = engine.pace
    desc: command voltage
    in [mV]
Vp = Vc + Iin * rseries_est
    desc: pipette voltage
    in [mV]
## assume `Vp` -> `Vc + Iin * rseries_est`
## assume `Iout` -> `Iin`
## assume `Vp` -> `V_clamp`
## assume `cm` estimated perfectly
## assume `cprs` estimated perfectly
cprs = 4.7 [pF]  # Not for fitting
Iin = mc.I
    desc: measured current
    in [pA]


#
# Ionic concentrations (clamp)
#
[potassium]
Ki = 110 [mM]
Ko = 4 [mM]

[sodium]
Nai = 10 [mM]
#Nao = 150 [mM]
Nao = 97.5 [mM]

[calcium]
Cai = 1e-5 in [mM]
Cao = 2.05 [mM]


#
# Reversal parameters
#
[rev]
use phys.RTF
ECa = 0.5 * RTF * log(calcium.Cao / calcium.Cai)
    in [mV]
EK = RTF * log(potassium.Ko / potassium.Ki)
    in [mV]
ENa = RTF * log(sodium.Nao / sodium.Nai)
    in [mV]


#
# Physical constants
#
[phys]
R = 8.314472 [J/mol/K]
T = 310 [K]  # 36-37oC (BT)
F = 9.64853415e4 [C/mol]
RTF = R * T / F * 1e3 in [mV]
