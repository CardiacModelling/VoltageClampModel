[[model]]
author: Chon Lok Lei
name: compensated_voltage_clamp_ikr
desc: """
Myokit version of a simple IKr model under a realistic voltage clamp model
with standard compensation.

Units:
    time in [ms]
    voltage in [mV]
    current in [pA]
    capacitance in [pF]
    resistance in [GOhm]
"""

# Initial values
membrane.V = -80.0 [mV]
voltageclamp.Vclamp = -80.0 [mV]
voltageclamp.Vp = -80.0 [mV]
voltageclamp.Vest = -80.0 [mV]
voltageclamp.Iout = 0.0 [mV]
ikr.open = 0 [1]
ikr.active = 1 [1]


[ikr]
use membrane.V
IKr = g * open * active * (V - rev.EK)
    in [pA]
dot(open) = (inf - open) / tau
    inf = k1 * tau
    tau = 1 / (k1 + k2)
    k1 = p1 * exp(p2 * V)
    k2 = p3 * exp(-p4 * V)
    in [1]
dot(active) = (inf - active) / tau
    inf = k4 * tau
    tau = 1 / (k3 + k4)
    k3 = p5 * exp(p6 * V)
    k4 = p7 * exp(-p8 * V)
    in [1]
p1 = 2.26e-4 [1/ms]
p2 = 0.0699 [1/mV]
p3 = 3.45e-5 [1/ms]
p4 = 0.05462 [1/mV]
p5 = 0.0873 [1/ms]
p6 = 8.91e-3 [1/mV]
p7 = 5.15e-3 [1/ms]
p8 = 0.03158 [1/mV]
g = 0.1524 * 1e3 [pA/mV]  # in nA range


[engine]
time = 0 bind time
    in [ms]
pace = 0 bind pace


[membrane]
use voltageclamp.Vp, voltageclamp.rseries, voltageclamp.voffset_eff
Iion = ikr.IKr + voltageclamp.ILeak
    in [pA]
cm = 100.0 [pF]  # in order of pF; TODO: fit
dot(V) = (Vp - V + voffset_eff) / tau - Iion / cm
    tau = cm * rseries in [ms]
    desc: membane potential
    in [mV]

[voltageclamp]
use membrane.V
# Parameters
rseries = 10.0 * 1e-3 [GR]  # in order of MegaOhms; TODO: fit
cprs = 4.0 [pF]  # Unknown value for 'parasitic' capacitance at electrode...
cprs_est = 4.0 * 0.9 [pF]  # eff. parasitic capacitance at electrode; TODO: fit
voffset_eff = 5 [mV]  # TODO: fit
rseries_est = 0.9 * 10.0e-3 [GR]  # TODO: later this one use measured value
cm_est = 0.9 * 100.0 [pF]  # TODO: similar to rseries_est, set value
alpha = 0.8 [1]  # NOTE: percentage of compensation, this is included in rseries_est already

# Command voltage
Vc = engine.pace
    desc: command voltage
    in [mV]

# Rs compensation and summing delay
tau_sum = 40e-3 in [ms]  # electronic delay term, ~ 5 - 70 microsecond
dVclampdt = (Vc + (Iout + cm_est * dVestdt) * rseries_est - Vclamp) / tau_sum
    in [mV/ms]
dot(Vclamp) = dVclampdt
    desc: clamp voltage
    in [mV]

# Supercharging
dVestdt = piecewise(
    cm_est < 1e-6, 0,
    rseries_est < 1e-6, 0,
    (Vc - Vest) / ((1 - alpha) * cm_est * rseries_est/alpha)
) in [mV/ms]
dot(Vest) = dVestdt
    in [mV]

# Amplifier delay
tau_clamp = 0.8 * 1e-3 in [ms]
dVpdt = (Vclamp - Vp) / tau_clamp in [mV/ms]
dot(Vp) = dVpdt
    desc: pipette voltage
    in [mV]

# Feedback delay
dot(Iout) = (Iin - Iout) / tau
    tau = 7.5 * 1e-3 in [ms]
    desc: measured current
    in [pA]

Iin = (
        (Vp - V + voffset_eff) / rseries
        + cprs * dVpdt
        - cprs_est * dVclampdt
        - cm_est * if(rseries_est < 1e-6, dVclampdt, dVestdt)
    )
    in [pA]

## assume linear leak residual
gLeak = 2 [pA/mV]
ELeak = -80 [mV]
ILeak = gLeak * (V - ELeak) in [pA]


#
# Ionic concentrations (clamp)
#
[potassium]
Ki = 110 [mM]
Ko = 4 [mM]


#
# Reversal parameters
#
[rev]
use phys.RTF
EK = RTF * log(potassium.Ko / potassium.Ki)
    in [mV]


#
# Physical constants
#
[phys]
R = 8.314472 [J/mol/K]
T = 310 [K]  # 36-37oC (BT)
F = 9.64853415e4 [C/mol]
RTF = R * T / F * 1e3 in [mV]
